{"version":3,"sources":["components/header.tsx","components/home.tsx","components/diagnosis.tsx","components/change.tsx","components/slander.tsx","components/be-slandered.tsx","components/report.tsx","components/ranking.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","withRouter","match","history","location","React","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","menuLinkList","path","title","map","linkData","MenuItem","onClick","key","push","MenuLink","className","IconButton","aria-controls","aria-haspopup","fontSize","Menu","id","keepMounted","open","Boolean","onClose","to","Home","console","log","Diagnosis","goBack","Change","Slander","BeSlandered","Report","Ranking","Router","exact","component","App","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e555b453.chunk.js","sourcesContent":["import React from 'react'\nimport {Link, RouteComponentProps, withRouter} from 'react-router-dom'\n// import { withStyles } from '@material-ui/core/styles';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuRoundedIcon from '@material-ui/icons/MenuRounded';\n\nimport \"../css/header.css\"\n\ninterface Props extends RouteComponentProps {}\ninterface LinkType {\n    path: string,\n    title: string\n}\n\n\nconst HeaderNotwithRouter = ({match, history, location}:Props) => {\n    const linkList: LinkType[] = [\n        {\n            path: \"/\",\n            title: \"Home\"\n        },\n        {\n            path: \"/diagnosis\",\n            title: \"Diagnosis\"\n        },\n        {\n            path: \"/change\",\n            title: \"Change\"\n        },\n        {\n            path: \"/slander\",\n            title: \"Slander\"\n        },\n        {\n            path: \"/be-slandered\",\n            title: \"Be Slandered\"\n        },\n        {\n            path: \"/report\",\n            title: \"Report\"\n        },\n        {\n            path: \"/ranking\",\n            title: \"Ranking\"\n        }\n    ]\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    }\n    const handleClose = () => {\n        setAnchorEl(null);\n    }\n    const handlePush = (key: string) => {\n        history.push(key)\n    }\n    const menuLinkList = linkList.map((linkData: LinkType) => (\n        <MenuItem onClick={() => handlePush(linkData.path)}>{linkData.title}</MenuItem>\n    ))\n\n\n    const MenuLink = () => (\n      <div className=\"menu-icon\">\n        <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            <MenuRoundedIcon fontSize=\"large\" />\n        </IconButton>\n        <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n        >\n            {menuLinkList}\n        </Menu>\n      </div>\n    )\n\n    return (\n        <header>\n            <MenuLink/>\n            <h1><Link className=\"header-title\" to=\"/\">誹謗中傷診断</Link></h1>\n        </header>\n    )\n}\n\n\nexport const Header = withRouter(HeaderNotwithRouter)","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport { Header } from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\nconst Home =  ({match, history, location}:Props) => {\n    console.log(match)\n    console.log(history)\n    console.log(location)\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Home</h1>\n            </div>\n        </>\n    )\n}\n\nexport {Home}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  Diagnosis = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Diagnosis</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {Diagnosis}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  Change = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Change</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {Change}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  Slander = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Slander</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {Slander}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  BeSlandered = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">BeSlandered</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {BeSlandered}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  Report = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Report</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {Report}","import React from 'react'\nimport {Link, RouteComponentProps} from 'react-router-dom'\nimport {Header} from './header'\nimport \"../css/main.css\"\n\ninterface Props extends RouteComponentProps {}\n\nconst  Ranking = ({history}:Props) => {\n    return (\n        <>\n            <Header />\n            <div className=\"main-body\">\n                <h1 className=\"title\">Ranking</h1>\n                <a onClick={history.goBack}>Back</a>\n            </div>\n        </>\n    )\n}\n\nexport {Ranking}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom'\n\nimport {Home} from './components/home'\nimport {Diagnosis} from './components/diagnosis'\nimport {Change} from './components/change'\nimport {Slander} from './components/slander'\nimport {BeSlandered} from './components/be-slandered'\nimport {Report} from './components/report'\nimport {Ranking} from './components/ranking'\n\nconst Router = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact={true} path=\"/\" component={Home} />\n                <Route path=\"/diagnosis\" component={Diagnosis} />\n                <Route path=\"/change\" component={Change} />\n                <Route path=\"/slander\" component={Slander} />\n                <Route path=\"/be-slandered\" component={BeSlandered} />\n                <Route path=\"/report\" component={Report} />\n                <Route path=\"/ranking\" component={Ranking} />\n                {/* Not Found */}\n                <Route component={() => <Redirect to=\"/\"/>} />\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\nexport {Router}","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Router} from './Router'\n\ninterface Props {}\nconst App = ({}: Props) => {\n  return (\n    <div className=\"App\">\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}